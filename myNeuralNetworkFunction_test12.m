function [Y,Xf,Af] = myNeuralNetworkFunction_test12(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-Jan-2019 17:25:34.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 0xTS cell, 0 inputs over TS timesteps
%
% and returns:
%   Y = 1xTS cell of 0 outputs over TS timesteps.
%   Each Y{1,ts} = 4xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Layer 1
b1 = [0.0002730340569660013217;0.099989954101358316518;-0.17727765498304715042;-0.043629338125763632295;-0.025669259662847582204;-0.062644289101481565041;0.05616558338145383189;-0.0038465364112984881152;-0.11112415114646623238;0.039162495587249136764;-0.035529327884269823468;-0.036141598550190112693;0.042830457140225063062;0.0077271083849055613099;0.034322403708735224614;0.19302688297971246079;0.016407831627856837159;0.090070887513313949158;0.093654029949354775098;-0.1208103068881457437];

% Layer 2
b2 = [-0.33515821951837082571;0.73246150829176104313;-0.38910992367355101695;0.34695224039105226899];
LW2_1 = [-0.90154336850666338954 0.18532983610902531435 -0.29118352336733382968 0.35061759969437505946 -0.50714011584375784381 -0.52880356616011670035 0.67063665223724089337 -0.51388356732543205574 -0.8131384358567816939 -0.83606447406792316901 0.39835394024597925444 -0.54372982153003823758 -0.82306558720464895185 0.18620600574977533292 -0.78337993175377096389 0.84329349164170241959 -0.5227955612970941468 -0.27404503698172860693 -0.0053517351310508201948 -0.60585746129241002667;-0.38009207571118247548 -0.6035348275422465214 0.9904500205768298482 0.18888985328339502612 -0.22844722067687769917 0.23786281645336254664 -0.41091703333278051247 0.0070096746801504546467 0.79988350328279023138 -0.86531263241236411332 -0.00072500589919122161893 -0.064793116778949194634 -0.70429884680328380675 -0.21940174009258489596 -0.97734034342534503725 -0.65690016605169354591 -0.91623971018247074571 -0.73592246396522853491 -0.36053978672996878085 0.39315539418082928735;0.09515547740206774241 0.26566163213082294448 -0.55829923722842789147 -0.30797455459934608424 0.76234535427407079666 0.22620579633510254358 -0.89478718560664416426 0.19855632009797019588 0.16625653796055586686 0.82526899890661886694 -0.50150672683451602563 -0.9805283434438518686 0.33897897218269579245 0.77182855625389257259 -0.32406999821925763783 0.28519599637709502904 -0.42588708267732378054 0.67465833613927350676 0.27016963780862468525 -0.79679628357817544604;-0.46440477339654639977 -0.22402386963801604325 0.57259980327088511043 0.76995781953028596956 0.54183582084425685466 0.012668986413314648268 0.3634370558948736285 -0.57972028823175592027 -0.66352247478214743115 0.2132428777639840678 0.98797547421116882482 -0.40035520037811872518 -0.36848072052412650379 0.89522473346702180486 0.10454044879992459294 -0.87226303100055635475 0.62802142197986199346 -0.24610693471283862088 -0.86340094473117190432 0.20551325840937592626];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [2.00780893845332;2.00625746094759;2.00345966291562;2.00074481535858];
y1_step1.xoffset = [0.000864901496447579;0.00278086182223247;0.000488726056631861;0.00027192967882661];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q));
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(0,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
